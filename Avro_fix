@provide_session
def get_all_failed_configs(session=None):
    """Fetch all failed XComs from two DAGs, append them back with 'read_' prefix, delete originals, and return values."""

    xcoms_1 = session.query(XCom).filter(
        XCom.dag_id == 'punctuality-boy-suv-main-dag',
        XCom.task_id == 'check_and_trigger',
        XCom.key == 'failed_checks'
    ).order_by(XCom.timestamp.desc()).all()

    xcoms_2 = session.query(XCom).filter(
        XCom.dag_id == 'completeness-girl-car-main-dag',
        XCom.task_id == 'check_and_trigger',
        XCom.key == 'failed_completeness'
    ).order_by(XCom.timestamp.desc()).all()

    result = []

    for xcom in xcoms_1 + xcoms_2:
        # Push value with new key before deletion
        XCom.set(
            key=f"read_{xcom.key}",
            value=xcom.value,
            dag_id=xcom.dag_id,
            task_id=xcom.task_id,
            run_id=xcom.run_id,
            session=session
        )
        result.append(xcom.value)
        session.delete(xcom)

    session.commit()
    return result
