def check_missing_files(**kwargs):
    from azure.identity import ClientSecretCredential
    from adlfs import AzureBlobFileSystem

    ti = kwargs["ti"]
    conf = kwargs["dag_run"].conf or {}
    failed_checks = conf.get("failed_checks", [])
    retry_counts = ti.xcom_pull(key="retry_counts", task_ids="recheck_files") or {}

    creds = Variable.get("adls_spn_credentials", deserialize_json=True)
    credential = ClientSecretCredential(
        tenant_id=creds["tenant_id"],
        client_id=creds["client_id"],
        client_secret=creds["client_secret"]
    )
    fs = AzureBlobFileSystem(account_name=creds["account_name"], credential=credential)

    still_missing = []
    updated_counts = {}

    for check in failed_checks:
        name = check["name"]
        for label in ["file_path_lake", "file_path_daas"]:
            path = check.get(label)
            if not path:
                continue
            key = f"{name}::{label}::{path}"
            retries = retry_counts.get(key, 0)

            if retries >= MAX_RETRIES:
                continue

            full_path = f"{creds['container_name']}/{path}"
            if not fs.exists(full_path):
                still_missing.append({"name": name, "label": label, "path": path})
                updated_counts[key] = retries + 1
            else:
                updated_counts[key] = 0  # reset on success

    ti.xcom_push(key="retry_counts", value=updated_counts)
    ti.xcom_push(key="still_missing", value=still_missing)

    if still_missing:
        raise Exception("Files still missing.")
