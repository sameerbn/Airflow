from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import Variable
from airflow.exceptions import AirflowSkipException
from airflow.utils.email import send_email
from adlfs import AzureBlobFileSystem
import pendulum
import json

RETRY_VAR_KEY = "retry_config_tracker"

def retry_unresolved_configs():
    retry_data = Variable.get(RETRY_VAR_KEY, default_var='{}', deserialize_json=True)
    abfs = AzureBlobFileSystem(account_name='your_account', account_key='your_key')
    updated_data = {}

    for name, entry in retry_data.items():
        retries = entry['retry']
        config = entry['config']
        paths = config['paths']

        # Check file existence
        missing = [p for p in paths if not abfs.exists(p.replace("azure://", ""))]

        if not missing:
            print(f"Config {name} resolved. Removing from retry tracker.")
            continue  # Drop from retry tracker if resolved

        if retries >= 20:
            print(f"Max retries reached for {name}. Dropping from retry tracker.")
            # Optional: send alert
            send_email(
                to="alerts@yourcompany.com",
                subject=f"[Airflow Alert] Retry limit reached for config: {name}",
                html_content=f"""
                <p>Config <strong>{name}</strong> has failed for 20 consecutive retries.</p>
                <p>It has now been removed from the retry tracker.</p>
                <pre>{json.dumps(config, indent=2)}</pre>
                """
            )
            continue  # Drop from tracker

        # If still missing and retry < 20, update count
        updated_data[name] = {
            "retry": retries + 1,
            "config": config
        }
        print(f"Retrying {name}: attempt {retries + 1}/20")

    # Save updated tracker
    Variable.set(RETRY_VAR_KEY, json.dumps(updated_data))

with DAG(
    dag_id='azure_config_retry_dag',
    start_date=pendulum.now().subtract(days=1),
    schedule_interval='@hourly',
    catchup=False
) as dag:

    retry_check = PythonOperator(
        task_id='retry_unresolved_configs',
        python_callable=retry_unresolved_configs
    )
