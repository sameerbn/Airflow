from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.models import Variable
from datetime import datetime
import pendulum
from adlfs import AzureBlobFileSystem
from azure.identity import ClientSecretCredential

def check_and_trigger(**kwargs):
    config = Variable.get("file_check_config", deserialize_json=True)
    now = pendulum.now()
    today = now.format('dddd')  # e.g. 'Monday'
    current_time = now.format('HH:mm')  # e.g. '10:00'

    # Load SPN credentials
    creds = Variable.get("adls_spn_credentials", deserialize_json=True)
    credential = ClientSecretCredential(
        tenant_id=creds["tenant_id"],
        client_id=creds["client_id"],
        client_secret=creds["client_secret"]
    )
    fs = AzureBlobFileSystem(account_name=creds["account_name"], credential=credential)

    failed_checks = []

    # Iterate over each check in the config
    for check in config["checks"]:
        if today in check["check_days"] and current_time == check["check_time"]:
            for label in ["file_path_lake", "file_path_daas"]:
                path = check.get(label)
                if path and not fs.exists(f"{creds['container_name']}/{path}"):
                    failed_checks.append({
                        "name": check["name"],
                        "label": label,
                        "path": path
                    })

    if failed_checks:
        kwargs["ti"].xcom_push(key="failed_checks", value=failed_checks)
        return 'retry_check'
    return 'check_success'

with DAG(
    dag_id="main_file_check_dag",
    start_date=datetime(2024, 1, 1),
    schedule_interval="@hourly",
    catchup=False
) as dag:

    check_files = PythonOperator(
        task_id="check_files",
        python_callable=check_and_trigger,
        provide_context=True
    )

    trigger_retry = TriggerDagRunOperator(
        task_id="trigger_retry_dag",
        trigger_dag_id="file_retry_dag",
        execution_date="{{ ts }}",
        wait_for_completion=False,
        reset_dag_run=True,
        conf={"source_dag": "main_file_check_dag"}
    )

    check_files >> trigger_retry
